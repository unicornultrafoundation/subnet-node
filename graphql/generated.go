// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// GetAppPeersAppPeersAppPeer includes the requested fields of the GraphQL type AppPeer.
type GetAppPeersAppPeersAppPeer struct {
	Peer GetAppPeersAppPeersAppPeerPeerPeerNode `json:"peer"`
}

// GetPeer returns GetAppPeersAppPeersAppPeer.Peer, and is useful for accessing the field via an interface.
func (v *GetAppPeersAppPeersAppPeer) GetPeer() GetAppPeersAppPeersAppPeerPeerPeerNode { return v.Peer }

// GetAppPeersAppPeersAppPeerPeerPeerNode includes the requested fields of the GraphQL type PeerNode.
type GetAppPeersAppPeersAppPeerPeerPeerNode struct {
	PeerId string `json:"peerId"`
}

// GetPeerId returns GetAppPeersAppPeersAppPeerPeerPeerNode.PeerId, and is useful for accessing the field via an interface.
func (v *GetAppPeersAppPeersAppPeerPeerPeerNode) GetPeerId() string { return v.PeerId }

// GetAppPeersResponse is returned by GetAppPeers on success.
type GetAppPeersResponse struct {
	AppPeers []GetAppPeersAppPeersAppPeer `json:"appPeers"`
}

// GetAppPeers returns GetAppPeersResponse.AppPeers, and is useful for accessing the field via an interface.
func (v *GetAppPeersResponse) GetAppPeers() []GetAppPeersAppPeersAppPeer { return v.AppPeers }

// __GetAppPeersInput is used internally by genqlient
type __GetAppPeersInput struct {
	Id string `json:"id"`
}

// GetId returns __GetAppPeersInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAppPeersInput) GetId() string { return v.Id }

// The query executed by GetAppPeers.
const GetAppPeers_Operation = `
query GetAppPeers ($id: ID!) {
	appPeers(where: {app:$id}) {
		peer {
			peerId
		}
	}
}
`

func GetAppPeers(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetAppPeersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAppPeers",
		Query:  GetAppPeers_Operation,
		Variables: &__GetAppPeersInput{
			Id: id,
		},
	}

	data_ = &GetAppPeersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
