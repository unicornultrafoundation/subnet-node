// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/subnet/subnet.proto

package subnet

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubnetMeta_MessageType int32

const (
	SubnetMeta_None                      SubnetMeta_MessageType = 0
	SubnetMeta_HostQuery                 SubnetMeta_MessageType = 1
	SubnetMeta_HostQueryReply            SubnetMeta_MessageType = 2
	SubnetMeta_HostUpdateNotification    SubnetMeta_MessageType = 3
	SubnetMeta_HostMovedNotification     SubnetMeta_MessageType = 4
	SubnetMeta_HostPunchNotification     SubnetMeta_MessageType = 5
	SubnetMeta_HostWhoami                SubnetMeta_MessageType = 6
	SubnetMeta_HostWhoamiReply           SubnetMeta_MessageType = 7
	SubnetMeta_PathCheck                 SubnetMeta_MessageType = 8
	SubnetMeta_PathCheckReply            SubnetMeta_MessageType = 9
	SubnetMeta_HostUpdateNotificationAck SubnetMeta_MessageType = 10
)

var SubnetMeta_MessageType_name = map[int32]string{
	0:  "None",
	1:  "HostQuery",
	2:  "HostQueryReply",
	3:  "HostUpdateNotification",
	4:  "HostMovedNotification",
	5:  "HostPunchNotification",
	6:  "HostWhoami",
	7:  "HostWhoamiReply",
	8:  "PathCheck",
	9:  "PathCheckReply",
	10: "HostUpdateNotificationAck",
}

var SubnetMeta_MessageType_value = map[string]int32{
	"None":                      0,
	"HostQuery":                 1,
	"HostQueryReply":            2,
	"HostUpdateNotification":    3,
	"HostMovedNotification":     4,
	"HostPunchNotification":     5,
	"HostWhoami":                6,
	"HostWhoamiReply":           7,
	"PathCheck":                 8,
	"PathCheckReply":            9,
	"HostUpdateNotificationAck": 10,
}

func (x SubnetMeta_MessageType) String() string {
	return proto.EnumName(SubnetMeta_MessageType_name, int32(x))
}

func (SubnetMeta_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{0, 0}
}

type SubnetPing_MessageType int32

const (
	SubnetPing_Ping  SubnetPing_MessageType = 0
	SubnetPing_Reply SubnetPing_MessageType = 1
)

var SubnetPing_MessageType_name = map[int32]string{
	0: "Ping",
	1: "Reply",
}

var SubnetPing_MessageType_value = map[string]int32{
	"Ping":  0,
	"Reply": 1,
}

func (x SubnetPing_MessageType) String() string {
	return proto.EnumName(SubnetPing_MessageType_name, int32(x))
}

func (SubnetPing_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{4, 0}
}

type SubnetControl_MessageType int32

const (
	SubnetControl_None                SubnetControl_MessageType = 0
	SubnetControl_CreateRelayRequest  SubnetControl_MessageType = 1
	SubnetControl_CreateRelayResponse SubnetControl_MessageType = 2
)

var SubnetControl_MessageType_name = map[int32]string{
	0: "None",
	1: "CreateRelayRequest",
	2: "CreateRelayResponse",
}

var SubnetControl_MessageType_value = map[string]int32{
	"None":                0,
	"CreateRelayRequest":  1,
	"CreateRelayResponse": 2,
}

func (x SubnetControl_MessageType) String() string {
	return proto.EnumName(SubnetControl_MessageType_name, int32(x))
}

func (SubnetControl_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{7, 0}
}

type SubnetMeta struct {
	Type    SubnetMeta_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=subnet.SubnetMeta_MessageType" json:"Type,omitempty"`
	Details *SubnetMetaDetails     `protobuf:"bytes,2,opt,name=Details,proto3" json:"Details,omitempty"`
}

func (m *SubnetMeta) Reset()         { *m = SubnetMeta{} }
func (m *SubnetMeta) String() string { return proto.CompactTextString(m) }
func (*SubnetMeta) ProtoMessage()    {}
func (*SubnetMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{0}
}
func (m *SubnetMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetMeta.Merge(m, src)
}
func (m *SubnetMeta) XXX_Size() int {
	return m.Size()
}
func (m *SubnetMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetMeta proto.InternalMessageInfo

func (m *SubnetMeta) GetType() SubnetMeta_MessageType {
	if m != nil {
		return m.Type
	}
	return SubnetMeta_None
}

func (m *SubnetMeta) GetDetails() *SubnetMetaDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type SubnetMetaDetails struct {
	VpnIp       uint32        `protobuf:"varint,1,opt,name=VpnIp,proto3" json:"VpnIp,omitempty"`
	Ip4AndPorts []*Ip4AndPort `protobuf:"bytes,2,rep,name=Ip4AndPorts,proto3" json:"Ip4AndPorts,omitempty"`
	Ip6AndPorts []*Ip6AndPort `protobuf:"bytes,4,rep,name=Ip6AndPorts,proto3" json:"Ip6AndPorts,omitempty"`
	RelayVpnIp  []uint32      `protobuf:"varint,5,rep,packed,name=RelayVpnIp,proto3" json:"RelayVpnIp,omitempty"`
	Counter     uint32        `protobuf:"varint,3,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *SubnetMetaDetails) Reset()         { *m = SubnetMetaDetails{} }
func (m *SubnetMetaDetails) String() string { return proto.CompactTextString(m) }
func (*SubnetMetaDetails) ProtoMessage()    {}
func (*SubnetMetaDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{1}
}
func (m *SubnetMetaDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetMetaDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetMetaDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetMetaDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetMetaDetails.Merge(m, src)
}
func (m *SubnetMetaDetails) XXX_Size() int {
	return m.Size()
}
func (m *SubnetMetaDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetMetaDetails.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetMetaDetails proto.InternalMessageInfo

func (m *SubnetMetaDetails) GetVpnIp() uint32 {
	if m != nil {
		return m.VpnIp
	}
	return 0
}

func (m *SubnetMetaDetails) GetIp4AndPorts() []*Ip4AndPort {
	if m != nil {
		return m.Ip4AndPorts
	}
	return nil
}

func (m *SubnetMetaDetails) GetIp6AndPorts() []*Ip6AndPort {
	if m != nil {
		return m.Ip6AndPorts
	}
	return nil
}

func (m *SubnetMetaDetails) GetRelayVpnIp() []uint32 {
	if m != nil {
		return m.RelayVpnIp
	}
	return nil
}

func (m *SubnetMetaDetails) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type Ip4AndPort struct {
	Ip   uint32 `protobuf:"varint,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (m *Ip4AndPort) Reset()         { *m = Ip4AndPort{} }
func (m *Ip4AndPort) String() string { return proto.CompactTextString(m) }
func (*Ip4AndPort) ProtoMessage()    {}
func (*Ip4AndPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{2}
}
func (m *Ip4AndPort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ip4AndPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ip4AndPort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ip4AndPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ip4AndPort.Merge(m, src)
}
func (m *Ip4AndPort) XXX_Size() int {
	return m.Size()
}
func (m *Ip4AndPort) XXX_DiscardUnknown() {
	xxx_messageInfo_Ip4AndPort.DiscardUnknown(m)
}

var xxx_messageInfo_Ip4AndPort proto.InternalMessageInfo

func (m *Ip4AndPort) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *Ip4AndPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Ip6AndPort struct {
	Hi   uint64 `protobuf:"varint,1,opt,name=Hi,proto3" json:"Hi,omitempty"`
	Lo   uint64 `protobuf:"varint,2,opt,name=Lo,proto3" json:"Lo,omitempty"`
	Port uint32 `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (m *Ip6AndPort) Reset()         { *m = Ip6AndPort{} }
func (m *Ip6AndPort) String() string { return proto.CompactTextString(m) }
func (*Ip6AndPort) ProtoMessage()    {}
func (*Ip6AndPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{3}
}
func (m *Ip6AndPort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ip6AndPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ip6AndPort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ip6AndPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ip6AndPort.Merge(m, src)
}
func (m *Ip6AndPort) XXX_Size() int {
	return m.Size()
}
func (m *Ip6AndPort) XXX_DiscardUnknown() {
	xxx_messageInfo_Ip6AndPort.DiscardUnknown(m)
}

var xxx_messageInfo_Ip6AndPort proto.InternalMessageInfo

func (m *Ip6AndPort) GetHi() uint64 {
	if m != nil {
		return m.Hi
	}
	return 0
}

func (m *Ip6AndPort) GetLo() uint64 {
	if m != nil {
		return m.Lo
	}
	return 0
}

func (m *Ip6AndPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type SubnetPing struct {
	Type SubnetPing_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=subnet.SubnetPing_MessageType" json:"Type,omitempty"`
	Time uint64                 `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *SubnetPing) Reset()         { *m = SubnetPing{} }
func (m *SubnetPing) String() string { return proto.CompactTextString(m) }
func (*SubnetPing) ProtoMessage()    {}
func (*SubnetPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{4}
}
func (m *SubnetPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetPing.Merge(m, src)
}
func (m *SubnetPing) XXX_Size() int {
	return m.Size()
}
func (m *SubnetPing) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetPing.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetPing proto.InternalMessageInfo

func (m *SubnetPing) GetType() SubnetPing_MessageType {
	if m != nil {
		return m.Type
	}
	return SubnetPing_Ping
}

func (m *SubnetPing) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type SubnetHandshake struct {
	Details *SubnetHandshakeDetails `protobuf:"bytes,1,opt,name=Details,proto3" json:"Details,omitempty"`
	Hmac    []byte                  `protobuf:"bytes,2,opt,name=Hmac,proto3" json:"Hmac,omitempty"`
}

func (m *SubnetHandshake) Reset()         { *m = SubnetHandshake{} }
func (m *SubnetHandshake) String() string { return proto.CompactTextString(m) }
func (*SubnetHandshake) ProtoMessage()    {}
func (*SubnetHandshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{5}
}
func (m *SubnetHandshake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetHandshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetHandshake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetHandshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetHandshake.Merge(m, src)
}
func (m *SubnetHandshake) XXX_Size() int {
	return m.Size()
}
func (m *SubnetHandshake) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetHandshake.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetHandshake proto.InternalMessageInfo

func (m *SubnetHandshake) GetDetails() *SubnetHandshakeDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *SubnetHandshake) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

type SubnetHandshakeDetails struct {
	Cert           []byte `protobuf:"bytes,1,opt,name=Cert,proto3" json:"Cert,omitempty"`
	InitiatorIndex uint32 `protobuf:"varint,2,opt,name=InitiatorIndex,proto3" json:"InitiatorIndex,omitempty"`
	ResponderIndex uint32 `protobuf:"varint,3,opt,name=ResponderIndex,proto3" json:"ResponderIndex,omitempty"`
	Cookie         uint64 `protobuf:"varint,4,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
	Time           uint64 `protobuf:"varint,5,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *SubnetHandshakeDetails) Reset()         { *m = SubnetHandshakeDetails{} }
func (m *SubnetHandshakeDetails) String() string { return proto.CompactTextString(m) }
func (*SubnetHandshakeDetails) ProtoMessage()    {}
func (*SubnetHandshakeDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{6}
}
func (m *SubnetHandshakeDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetHandshakeDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetHandshakeDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetHandshakeDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetHandshakeDetails.Merge(m, src)
}
func (m *SubnetHandshakeDetails) XXX_Size() int {
	return m.Size()
}
func (m *SubnetHandshakeDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetHandshakeDetails.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetHandshakeDetails proto.InternalMessageInfo

func (m *SubnetHandshakeDetails) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *SubnetHandshakeDetails) GetInitiatorIndex() uint32 {
	if m != nil {
		return m.InitiatorIndex
	}
	return 0
}

func (m *SubnetHandshakeDetails) GetResponderIndex() uint32 {
	if m != nil {
		return m.ResponderIndex
	}
	return 0
}

func (m *SubnetHandshakeDetails) GetCookie() uint64 {
	if m != nil {
		return m.Cookie
	}
	return 0
}

func (m *SubnetHandshakeDetails) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type SubnetControl struct {
	Type                SubnetControl_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=subnet.SubnetControl_MessageType" json:"Type,omitempty"`
	InitiatorRelayIndex uint32                    `protobuf:"varint,2,opt,name=InitiatorRelayIndex,proto3" json:"InitiatorRelayIndex,omitempty"`
	ResponderRelayIndex uint32                    `protobuf:"varint,3,opt,name=ResponderRelayIndex,proto3" json:"ResponderRelayIndex,omitempty"`
	RelayToIp           uint32                    `protobuf:"varint,4,opt,name=RelayToIp,proto3" json:"RelayToIp,omitempty"`
	RelayFromIp         uint32                    `protobuf:"varint,5,opt,name=RelayFromIp,proto3" json:"RelayFromIp,omitempty"`
}

func (m *SubnetControl) Reset()         { *m = SubnetControl{} }
func (m *SubnetControl) String() string { return proto.CompactTextString(m) }
func (*SubnetControl) ProtoMessage()    {}
func (*SubnetControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_8252369e9541aa8a, []int{7}
}
func (m *SubnetControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubnetControl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubnetControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetControl.Merge(m, src)
}
func (m *SubnetControl) XXX_Size() int {
	return m.Size()
}
func (m *SubnetControl) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetControl.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetControl proto.InternalMessageInfo

func (m *SubnetControl) GetType() SubnetControl_MessageType {
	if m != nil {
		return m.Type
	}
	return SubnetControl_None
}

func (m *SubnetControl) GetInitiatorRelayIndex() uint32 {
	if m != nil {
		return m.InitiatorRelayIndex
	}
	return 0
}

func (m *SubnetControl) GetResponderRelayIndex() uint32 {
	if m != nil {
		return m.ResponderRelayIndex
	}
	return 0
}

func (m *SubnetControl) GetRelayToIp() uint32 {
	if m != nil {
		return m.RelayToIp
	}
	return 0
}

func (m *SubnetControl) GetRelayFromIp() uint32 {
	if m != nil {
		return m.RelayFromIp
	}
	return 0
}

func init() {
	proto.RegisterEnum("subnet.SubnetMeta_MessageType", SubnetMeta_MessageType_name, SubnetMeta_MessageType_value)
	proto.RegisterEnum("subnet.SubnetPing_MessageType", SubnetPing_MessageType_name, SubnetPing_MessageType_value)
	proto.RegisterEnum("subnet.SubnetControl_MessageType", SubnetControl_MessageType_name, SubnetControl_MessageType_value)
	proto.RegisterType((*SubnetMeta)(nil), "subnet.SubnetMeta")
	proto.RegisterType((*SubnetMetaDetails)(nil), "subnet.SubnetMetaDetails")
	proto.RegisterType((*Ip4AndPort)(nil), "subnet.Ip4AndPort")
	proto.RegisterType((*Ip6AndPort)(nil), "subnet.Ip6AndPort")
	proto.RegisterType((*SubnetPing)(nil), "subnet.SubnetPing")
	proto.RegisterType((*SubnetHandshake)(nil), "subnet.SubnetHandshake")
	proto.RegisterType((*SubnetHandshakeDetails)(nil), "subnet.SubnetHandshakeDetails")
	proto.RegisterType((*SubnetControl)(nil), "subnet.SubnetControl")
}

func init() { proto.RegisterFile("proto/subnet/subnet.proto", fileDescriptor_8252369e9541aa8a) }

var fileDescriptor_8252369e9541aa8a = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x1d, 0xe7, 0x6f, 0xd2, 0xa4, 0x66, 0x0a, 0x21, 0x41, 0x60, 0x05, 0x1f, 0x50, 0x4e,
	0xa5, 0x4a, 0x4b, 0xc5, 0x91, 0x12, 0x84, 0x92, 0xaa, 0xad, 0xc2, 0x52, 0x40, 0xe2, 0x82, 0xdc,
	0x64, 0x69, 0xac, 0x24, 0xbb, 0xc6, 0xde, 0xa0, 0xe6, 0x2d, 0x78, 0x98, 0x3e, 0x04, 0x37, 0x7a,
	0xe4, 0x88, 0xda, 0x23, 0x47, 0x5e, 0x00, 0xed, 0xda, 0xb1, 0x9d, 0x34, 0x70, 0xf2, 0xce, 0xcc,
	0xf7, 0xed, 0x7e, 0xf3, 0xed, 0x78, 0xa1, 0xe1, 0xf9, 0x5c, 0xf0, 0xa7, 0xc1, 0xec, 0x8c, 0x51,
	0x11, 0x7d, 0xb6, 0x55, 0x0e, 0xf3, 0x61, 0x64, 0xff, 0xd6, 0x01, 0xde, 0xaa, 0xe5, 0x31, 0x15,
	0x0e, 0xb6, 0xc1, 0x38, 0x9d, 0x7b, 0xb4, 0xae, 0x35, 0xb5, 0x56, 0xb5, 0x6d, 0x6d, 0x47, 0x9c,
	0x04, 0xb1, 0x7d, 0x4c, 0x83, 0xc0, 0x39, 0xa7, 0x12, 0x45, 0x14, 0x16, 0x77, 0xa1, 0xf0, 0x8a,
	0x0a, 0xc7, 0x9d, 0x04, 0x75, 0xbd, 0xa9, 0xb5, 0xca, 0xed, 0xc6, 0x6d, 0x5a, 0x04, 0x20, 0x0b,
	0xa4, 0xfd, 0x47, 0x83, 0x72, 0x6a, 0x2b, 0x2c, 0x82, 0x71, 0xc2, 0x19, 0x35, 0x33, 0x58, 0x81,
	0x52, 0x97, 0x07, 0xe2, 0xcd, 0x8c, 0xfa, 0x73, 0x53, 0x43, 0x84, 0x6a, 0x1c, 0x12, 0xea, 0x4d,
	0xe6, 0xa6, 0x8e, 0x0f, 0xa0, 0x26, 0x73, 0xef, 0xbc, 0xa1, 0x23, 0xe8, 0x09, 0x17, 0xee, 0x67,
	0x77, 0xe0, 0x08, 0x97, 0x33, 0x33, 0x8b, 0x0d, 0xb8, 0x27, 0x6b, 0xc7, 0xfc, 0x2b, 0x1d, 0x2e,
	0x95, 0x8c, 0x45, 0xa9, 0x3f, 0x63, 0x83, 0xd1, 0x52, 0x29, 0x87, 0x55, 0x00, 0x59, 0xfa, 0x30,
	0xe2, 0xce, 0xd4, 0x35, 0xf3, 0xb8, 0x05, 0x9b, 0x49, 0x1c, 0x1e, 0x5b, 0x90, 0xca, 0xfa, 0x8e,
	0x18, 0x75, 0x46, 0x74, 0x30, 0x36, 0x8b, 0x52, 0x59, 0x1c, 0x86, 0x90, 0x12, 0x3e, 0x82, 0xc6,
	0x7a, 0x65, 0x07, 0x83, 0xb1, 0x09, 0xf6, 0x0f, 0x0d, 0xee, 0xdc, 0x32, 0x05, 0xef, 0x42, 0xee,
	0xbd, 0xc7, 0x7a, 0x9e, 0x72, 0xbd, 0x42, 0xc2, 0x00, 0xf7, 0xa0, 0xdc, 0xf3, 0xf6, 0x0e, 0xd8,
	0xb0, 0xcf, 0x7d, 0x21, 0xad, 0xcd, 0xb6, 0xca, 0x6d, 0x5c, 0x58, 0x9b, 0x94, 0x48, 0x1a, 0x16,
	0xb2, 0xf6, 0x63, 0x96, 0xb1, 0xca, 0xda, 0x4f, 0xb1, 0x62, 0x18, 0x5a, 0x00, 0x84, 0x4e, 0x9c,
	0x79, 0x28, 0x23, 0xd7, 0xcc, 0xb6, 0x2a, 0x24, 0x95, 0xc1, 0x3a, 0x14, 0x06, 0x7c, 0xc6, 0x04,
	0xf5, 0xeb, 0x59, 0xa5, 0x71, 0x11, 0xda, 0x3b, 0x00, 0xc9, 0xf1, 0x58, 0x05, 0x3d, 0x6e, 0x43,
	0xef, 0x79, 0x88, 0x60, 0xc8, 0xbc, 0x9a, 0x8b, 0x0a, 0x51, 0x6b, 0xfb, 0x85, 0x64, 0xec, 0xa7,
	0x18, 0x5d, 0x57, 0x31, 0x0c, 0xa2, 0x77, 0x5d, 0x19, 0x1f, 0x71, 0x85, 0x37, 0x88, 0x7e, 0xc4,
	0xe3, 0x1d, 0xb2, 0xa9, 0x1d, 0x2e, 0x16, 0x23, 0xdb, 0x77, 0xd9, 0xf9, 0xff, 0x47, 0x56, 0x22,
	0xd6, 0x8c, 0x2c, 0x82, 0x71, 0xea, 0x4e, 0x69, 0x74, 0x8e, 0x5a, 0xdb, 0xf6, 0xad, 0x81, 0x94,
	0x64, 0x33, 0x83, 0x25, 0xc8, 0x85, 0xd7, 0xab, 0xd9, 0x9f, 0x60, 0x33, 0xdc, 0xb7, 0xeb, 0xb0,
	0x61, 0x30, 0x72, 0xc6, 0x14, 0x9f, 0x27, 0xd3, 0xaf, 0xa9, 0xe9, 0x5f, 0x51, 0x10, 0x23, 0x57,
	0x7f, 0x01, 0x29, 0xa2, 0x3b, 0x75, 0x06, 0x4a, 0xc4, 0x06, 0x51, 0x6b, 0xfb, 0x52, 0x83, 0xda,
	0x7a, 0x9e, 0x84, 0x77, 0xa8, 0x2f, 0xd4, 0x29, 0x1b, 0x44, 0xad, 0xf1, 0x09, 0x54, 0x7b, 0xcc,
	0x15, 0xae, 0x23, 0xb8, 0xdf, 0x63, 0x43, 0x7a, 0x11, 0x39, 0xbd, 0x92, 0x95, 0x38, 0x42, 0x03,
	0x8f, 0xb3, 0x21, 0x8d, 0x70, 0xa1, 0x9f, 0x2b, 0x59, 0xac, 0x41, 0xbe, 0xc3, 0xf9, 0xd8, 0xa5,
	0x75, 0x43, 0x39, 0x13, 0x45, 0xb1, 0x5f, 0xb9, 0xc4, 0xaf, 0x43, 0xa3, 0x98, 0x37, 0x0b, 0x87,
	0x46, 0xb1, 0x60, 0x16, 0xed, 0x4b, 0x1d, 0x2a, 0xa1, 0xec, 0x0e, 0x67, 0xc2, 0xe7, 0x13, 0x7c,
	0xb6, 0x74, 0x2b, 0x8f, 0x97, 0x3d, 0x89, 0x40, 0x6b, 0x2e, 0x66, 0x07, 0xb6, 0x62, 0xe9, 0x6a,
	0xfe, 0xd2, 0x5d, 0xad, 0x2b, 0x49, 0x46, 0xdc, 0x44, 0x8a, 0x11, 0xf6, 0xb7, 0xae, 0x84, 0x0f,
	0xa1, 0xa4, 0xa2, 0x53, 0xde, 0xf3, 0x54, 0x9f, 0x15, 0x92, 0x24, 0xb0, 0x09, 0x65, 0x15, 0xbc,
	0xf6, 0xf9, 0x54, 0xfd, 0x0b, 0xb2, 0x9e, 0x4e, 0xd9, 0xdd, 0x7f, 0xbd, 0x5c, 0x35, 0xc0, 0x8e,
	0x4f, 0x1d, 0x41, 0x15, 0x9a, 0xd0, 0x2f, 0x33, 0x1a, 0x08, 0x53, 0xc3, 0xfb, 0xb0, 0xb5, 0x94,
	0x97, 0x92, 0x02, 0x6a, 0xea, 0x2f, 0x9b, 0xdf, 0xaf, 0x2d, 0xed, 0xea, 0xda, 0xd2, 0x7e, 0x5d,
	0x5b, 0xda, 0xb7, 0x1b, 0x2b, 0x73, 0x75, 0x63, 0x65, 0x7e, 0xde, 0x58, 0x99, 0x8f, 0xd1, 0xf3,
	0x7c, 0x96, 0x57, 0xaf, 0xf5, 0xee, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0xdf, 0x72, 0x03,
	0xca, 0x05, 0x00, 0x00,
}

func (m *SubnetMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubnetMetaDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetMetaDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetMetaDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelayVpnIp) > 0 {
		dAtA3 := make([]byte, len(m.RelayVpnIp)*10)
		var j2 int
		for _, num := range m.RelayVpnIp {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintSubnet(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ip6AndPorts) > 0 {
		for iNdEx := len(m.Ip6AndPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ip6AndPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubnet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Counter != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ip4AndPorts) > 0 {
		for iNdEx := len(m.Ip4AndPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ip4AndPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubnet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.VpnIp != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.VpnIp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ip4AndPort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ip4AndPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ip4AndPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if m.Ip != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Ip))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ip6AndPort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ip6AndPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ip6AndPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if m.Lo != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Lo))
		i--
		dAtA[i] = 0x10
	}
	if m.Hi != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Hi))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubnetPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubnetHandshake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetHandshake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetHandshake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hmac) > 0 {
		i -= len(m.Hmac)
		copy(dAtA[i:], m.Hmac)
		i = encodeVarintSubnet(dAtA, i, uint64(len(m.Hmac)))
		i--
		dAtA[i] = 0x12
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubnetHandshakeDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetHandshakeDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetHandshakeDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x28
	}
	if m.Cookie != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Cookie))
		i--
		dAtA[i] = 0x20
	}
	if m.ResponderIndex != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.ResponderIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.InitiatorIndex != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.InitiatorIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintSubnet(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubnetControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelayFromIp != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.RelayFromIp))
		i--
		dAtA[i] = 0x28
	}
	if m.RelayToIp != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.RelayToIp))
		i--
		dAtA[i] = 0x20
	}
	if m.ResponderRelayIndex != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.ResponderRelayIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.InitiatorRelayIndex != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.InitiatorRelayIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintSubnet(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubnet(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubnet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubnetMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSubnet(uint64(m.Type))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovSubnet(uint64(l))
	}
	return n
}

func (m *SubnetMetaDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VpnIp != 0 {
		n += 1 + sovSubnet(uint64(m.VpnIp))
	}
	if len(m.Ip4AndPorts) > 0 {
		for _, e := range m.Ip4AndPorts {
			l = e.Size()
			n += 1 + l + sovSubnet(uint64(l))
		}
	}
	if m.Counter != 0 {
		n += 1 + sovSubnet(uint64(m.Counter))
	}
	if len(m.Ip6AndPorts) > 0 {
		for _, e := range m.Ip6AndPorts {
			l = e.Size()
			n += 1 + l + sovSubnet(uint64(l))
		}
	}
	if len(m.RelayVpnIp) > 0 {
		l = 0
		for _, e := range m.RelayVpnIp {
			l += sovSubnet(uint64(e))
		}
		n += 1 + sovSubnet(uint64(l)) + l
	}
	return n
}

func (m *Ip4AndPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != 0 {
		n += 1 + sovSubnet(uint64(m.Ip))
	}
	if m.Port != 0 {
		n += 1 + sovSubnet(uint64(m.Port))
	}
	return n
}

func (m *Ip6AndPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hi != 0 {
		n += 1 + sovSubnet(uint64(m.Hi))
	}
	if m.Lo != 0 {
		n += 1 + sovSubnet(uint64(m.Lo))
	}
	if m.Port != 0 {
		n += 1 + sovSubnet(uint64(m.Port))
	}
	return n
}

func (m *SubnetPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSubnet(uint64(m.Type))
	}
	if m.Time != 0 {
		n += 1 + sovSubnet(uint64(m.Time))
	}
	return n
}

func (m *SubnetHandshake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovSubnet(uint64(l))
	}
	l = len(m.Hmac)
	if l > 0 {
		n += 1 + l + sovSubnet(uint64(l))
	}
	return n
}

func (m *SubnetHandshakeDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovSubnet(uint64(l))
	}
	if m.InitiatorIndex != 0 {
		n += 1 + sovSubnet(uint64(m.InitiatorIndex))
	}
	if m.ResponderIndex != 0 {
		n += 1 + sovSubnet(uint64(m.ResponderIndex))
	}
	if m.Cookie != 0 {
		n += 1 + sovSubnet(uint64(m.Cookie))
	}
	if m.Time != 0 {
		n += 1 + sovSubnet(uint64(m.Time))
	}
	return n
}

func (m *SubnetControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSubnet(uint64(m.Type))
	}
	if m.InitiatorRelayIndex != 0 {
		n += 1 + sovSubnet(uint64(m.InitiatorRelayIndex))
	}
	if m.ResponderRelayIndex != 0 {
		n += 1 + sovSubnet(uint64(m.ResponderRelayIndex))
	}
	if m.RelayToIp != 0 {
		n += 1 + sovSubnet(uint64(m.RelayToIp))
	}
	if m.RelayFromIp != 0 {
		n += 1 + sovSubnet(uint64(m.RelayFromIp))
	}
	return n
}

func sovSubnet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubnet(x uint64) (n int) {
	return sovSubnet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubnetMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SubnetMeta_MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &SubnetMetaDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetMetaDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetMetaDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetMetaDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpnIp", wireType)
			}
			m.VpnIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VpnIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip4AndPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip4AndPorts = append(m.Ip4AndPorts, &Ip4AndPort{})
			if err := m.Ip4AndPorts[len(m.Ip4AndPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6AndPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip6AndPorts = append(m.Ip6AndPorts, &Ip6AndPort{})
			if err := m.Ip6AndPorts[len(m.Ip6AndPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RelayVpnIp = append(m.RelayVpnIp, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSubnet
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSubnet
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RelayVpnIp) == 0 {
					m.RelayVpnIp = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubnet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RelayVpnIp = append(m.RelayVpnIp, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayVpnIp", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ip4AndPort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ip4AndPort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ip4AndPort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			m.Ip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ip6AndPort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ip6AndPort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ip6AndPort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hi", wireType)
			}
			m.Hi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hi |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lo", wireType)
			}
			m.Lo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SubnetPing_MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetHandshake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetHandshake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetHandshake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &SubnetHandshakeDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hmac", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSubnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSubnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hmac = append(m.Hmac[:0], dAtA[iNdEx:postIndex]...)
			if m.Hmac == nil {
				m.Hmac = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetHandshakeDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetHandshakeDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetHandshakeDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSubnet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSubnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorIndex", wireType)
			}
			m.InitiatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatorIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponderIndex", wireType)
			}
			m.ResponderIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponderIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			m.Cookie = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cookie |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SubnetControl_MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorRelayIndex", wireType)
			}
			m.InitiatorRelayIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatorRelayIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponderRelayIndex", wireType)
			}
			m.ResponderRelayIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponderRelayIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayToIp", wireType)
			}
			m.RelayToIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayToIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayFromIp", wireType)
			}
			m.RelayFromIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayFromIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubnet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubnet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubnet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubnet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubnet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubnet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubnet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubnet = fmt.Errorf("proto: unexpected end of group")
)
