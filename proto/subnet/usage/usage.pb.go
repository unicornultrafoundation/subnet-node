// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/subnet/usage/usage.proto

package usage

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ResourceUsage represents the resource usage data
type ResourceUsage struct {
	AppId             []byte `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SubnetId          []byte `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	UsedCpu           []byte `protobuf:"bytes,3,opt,name=used_cpu,json=usedCpu,proto3" json:"used_cpu,omitempty"`
	UsedGpu           []byte `protobuf:"bytes,4,opt,name=used_gpu,json=usedGpu,proto3" json:"used_gpu,omitempty"`
	UsedMemory        []byte `protobuf:"bytes,5,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	UsedStorage       []byte `protobuf:"bytes,6,opt,name=used_storage,json=usedStorage,proto3" json:"used_storage,omitempty"`
	UsedUploadBytes   []byte `protobuf:"bytes,7,opt,name=used_upload_bytes,json=usedUploadBytes,proto3" json:"used_upload_bytes,omitempty"`
	UsedDownloadBytes []byte `protobuf:"bytes,8,opt,name=used_download_bytes,json=usedDownloadBytes,proto3" json:"used_download_bytes,omitempty"`
	Duration          []byte `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *ResourceUsage) Reset()         { *m = ResourceUsage{} }
func (m *ResourceUsage) String() string { return proto.CompactTextString(m) }
func (*ResourceUsage) ProtoMessage()    {}
func (*ResourceUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f50a487992ba507, []int{0}
}
func (m *ResourceUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceUsage.Merge(m, src)
}
func (m *ResourceUsage) XXX_Size() int {
	return m.Size()
}
func (m *ResourceUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceUsage.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceUsage proto.InternalMessageInfo

func (m *ResourceUsage) GetAppId() []byte {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *ResourceUsage) GetSubnetId() []byte {
	if m != nil {
		return m.SubnetId
	}
	return nil
}

func (m *ResourceUsage) GetUsedCpu() []byte {
	if m != nil {
		return m.UsedCpu
	}
	return nil
}

func (m *ResourceUsage) GetUsedGpu() []byte {
	if m != nil {
		return m.UsedGpu
	}
	return nil
}

func (m *ResourceUsage) GetUsedMemory() []byte {
	if m != nil {
		return m.UsedMemory
	}
	return nil
}

func (m *ResourceUsage) GetUsedStorage() []byte {
	if m != nil {
		return m.UsedStorage
	}
	return nil
}

func (m *ResourceUsage) GetUsedUploadBytes() []byte {
	if m != nil {
		return m.UsedUploadBytes
	}
	return nil
}

func (m *ResourceUsage) GetUsedDownloadBytes() []byte {
	if m != nil {
		return m.UsedDownloadBytes
	}
	return nil
}

func (m *ResourceUsage) GetDuration() []byte {
	if m != nil {
		return m.Duration
	}
	return nil
}

// ResourceUsageMetadata represents the resource usage info of an application
type ResourceUsageMetadata struct {
	Pids []uint32 `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty"`
}

func (m *ResourceUsageMetadata) Reset()         { *m = ResourceUsageMetadata{} }
func (m *ResourceUsageMetadata) String() string { return proto.CompactTextString(m) }
func (*ResourceUsageMetadata) ProtoMessage()    {}
func (*ResourceUsageMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f50a487992ba507, []int{1}
}
func (m *ResourceUsageMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceUsageMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceUsageMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceUsageMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceUsageMetadata.Merge(m, src)
}
func (m *ResourceUsageMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ResourceUsageMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceUsageMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceUsageMetadata proto.InternalMessageInfo

func (m *ResourceUsageMetadata) GetPids() []uint32 {
	if m != nil {
		return m.Pids
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceUsage)(nil), "usage.ResourceUsage")
	proto.RegisterType((*ResourceUsageMetadata)(nil), "usage.ResourceUsageMetadata")
}

func init() { proto.RegisterFile("proto/subnet/usage/usage.proto", fileDescriptor_6f50a487992ba507) }

var fileDescriptor_6f50a487992ba507 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x4d, 0x4a, 0x03, 0x31,
	0x14, 0x80, 0x9b, 0xfe, 0x4e, 0x9f, 0x2d, 0x62, 0xa4, 0x10, 0x15, 0x62, 0xed, 0xaa, 0x28, 0xb4,
	0x0b, 0x6f, 0x50, 0x05, 0xe9, 0xa2, 0x9b, 0x4a, 0xd7, 0x25, 0x6d, 0xc2, 0x30, 0x60, 0x27, 0x61,
	0x92, 0x20, 0xbd, 0x85, 0x97, 0xf1, 0x0e, 0x2e, 0xbb, 0x74, 0x29, 0x33, 0x17, 0x91, 0xbc, 0xf8,
	0xbb, 0x19, 0xe6, 0x7d, 0xdf, 0x37, 0x0f, 0x26, 0x01, 0x6e, 0x0a, 0xed, 0xf4, 0xd4, 0xfa, 0x4d,
	0xae, 0xdc, 0xd4, 0x5b, 0x91, 0xaa, 0xf8, 0x9c, 0xa0, 0xa0, 0x2d, 0x1c, 0x46, 0xaf, 0x75, 0xe8,
	0x2f, 0x95, 0xd5, 0xbe, 0xd8, 0xaa, 0x55, 0x20, 0x74, 0x00, 0x6d, 0x61, 0xcc, 0x3a, 0x93, 0x8c,
	0x0c, 0xc9, 0xb8, 0xb7, 0x6c, 0x09, 0x63, 0xe6, 0x92, 0x5e, 0x40, 0x37, 0xee, 0x0a, 0xa6, 0x8e,
	0x26, 0x89, 0x60, 0x2e, 0xe9, 0x19, 0x24, 0xde, 0x2a, 0xb9, 0xde, 0x1a, 0xcf, 0x1a, 0xe8, 0x3a,
	0x61, 0xbe, 0x33, 0xfe, 0x47, 0xa5, 0xc6, 0xb3, 0xe6, 0xaf, 0x7a, 0x30, 0x9e, 0x5e, 0xc2, 0x11,
	0xaa, 0x9d, 0xda, 0xe9, 0x62, 0xcf, 0x5a, 0x68, 0x21, 0xa0, 0x05, 0x12, 0x7a, 0x05, 0x3d, 0x0c,
	0xac, 0xd3, 0x85, 0x48, 0x15, 0x6b, 0x63, 0x81, 0x1f, 0x3d, 0x46, 0x44, 0xaf, 0xe1, 0x04, 0x13,
	0x6f, 0x9e, 0xb4, 0x90, 0xeb, 0xcd, 0xde, 0x29, 0xcb, 0x3a, 0xd8, 0x1d, 0x07, 0xb1, 0x42, 0x3e,
	0x0b, 0x98, 0x4e, 0xe0, 0x14, 0x5b, 0xa9, 0x9f, 0xf3, 0x3f, 0x75, 0x82, 0x35, 0xae, 0xb9, 0xff,
	0x32, 0xb1, 0x3f, 0x87, 0x44, 0xfa, 0x42, 0xb8, 0x4c, 0xe7, 0xac, 0x1b, 0xff, 0xf8, 0x7b, 0x1e,
	0xdd, 0xc0, 0xe0, 0xdf, 0xb1, 0x2d, 0x94, 0x13, 0x52, 0x38, 0x41, 0x29, 0x34, 0x4d, 0x26, 0x2d,
	0x23, 0xc3, 0xc6, 0xb8, 0xbf, 0xc4, 0xf7, 0x19, 0x7b, 0x2b, 0x39, 0x39, 0x94, 0x9c, 0x7c, 0x94,
	0x9c, 0xbc, 0x54, 0xbc, 0x76, 0xa8, 0x78, 0xed, 0xbd, 0xe2, 0xb5, 0x4d, 0x1b, 0x2f, 0xe3, 0xf6,
	0x33, 0x00, 0x00, 0xff, 0xff, 0x67, 0xde, 0xc8, 0x30, 0xae, 0x01, 0x00, 0x00,
}

func (m *ResourceUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UsedDownloadBytes) > 0 {
		i -= len(m.UsedDownloadBytes)
		copy(dAtA[i:], m.UsedDownloadBytes)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.UsedDownloadBytes)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UsedUploadBytes) > 0 {
		i -= len(m.UsedUploadBytes)
		copy(dAtA[i:], m.UsedUploadBytes)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.UsedUploadBytes)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UsedStorage) > 0 {
		i -= len(m.UsedStorage)
		copy(dAtA[i:], m.UsedStorage)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.UsedStorage)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UsedMemory) > 0 {
		i -= len(m.UsedMemory)
		copy(dAtA[i:], m.UsedMemory)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.UsedMemory)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UsedGpu) > 0 {
		i -= len(m.UsedGpu)
		copy(dAtA[i:], m.UsedGpu)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.UsedGpu)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UsedCpu) > 0 {
		i -= len(m.UsedCpu)
		copy(dAtA[i:], m.UsedCpu)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.UsedCpu)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubnetId) > 0 {
		i -= len(m.SubnetId)
		copy(dAtA[i:], m.SubnetId)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.SubnetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceUsageMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsageMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceUsageMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pids) > 0 {
		dAtA2 := make([]byte, len(m.Pids)*10)
		var j1 int
		for _, num := range m.Pids {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintUsage(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsage(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourceUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = len(m.UsedCpu)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = len(m.UsedGpu)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = len(m.UsedMemory)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = len(m.UsedStorage)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = len(m.UsedUploadBytes)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = len(m.UsedDownloadBytes)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	return n
}

func (m *ResourceUsageMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovUsage(uint64(e))
		}
		n += 1 + sovUsage(uint64(l)) + l
	}
	return n
}

func sovUsage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsage(x uint64) (n int) {
	return sovUsage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = append(m.AppId[:0], dAtA[iNdEx:postIndex]...)
			if m.AppId == nil {
				m.AppId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = append(m.SubnetId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubnetId == nil {
				m.SubnetId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCpu", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedCpu = append(m.UsedCpu[:0], dAtA[iNdEx:postIndex]...)
			if m.UsedCpu == nil {
				m.UsedCpu = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedGpu", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedGpu = append(m.UsedGpu[:0], dAtA[iNdEx:postIndex]...)
			if m.UsedGpu == nil {
				m.UsedGpu = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMemory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedMemory = append(m.UsedMemory[:0], dAtA[iNdEx:postIndex]...)
			if m.UsedMemory == nil {
				m.UsedMemory = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedStorage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedStorage = append(m.UsedStorage[:0], dAtA[iNdEx:postIndex]...)
			if m.UsedStorage == nil {
				m.UsedStorage = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedUploadBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedUploadBytes = append(m.UsedUploadBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.UsedUploadBytes == nil {
				m.UsedUploadBytes = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDownloadBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedDownloadBytes = append(m.UsedDownloadBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.UsedDownloadBytes == nil {
				m.UsedDownloadBytes = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = append(m.Duration[:0], dAtA[iNdEx:postIndex]...)
			if m.Duration == nil {
				m.Duration = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceUsageMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsageMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsageMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUsage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUsage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsage = fmt.Errorf("proto: unexpected end of group")
)
