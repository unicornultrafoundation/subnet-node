// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/subnet/app/verifier/types.proto

package subnet_app_verifier

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignatureRequest struct {
	AppId      int64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProviderId int64 `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
}

func (m *SignatureRequest) Reset()         { *m = SignatureRequest{} }
func (m *SignatureRequest) String() string { return proto.CompactTextString(m) }
func (*SignatureRequest) ProtoMessage()    {}
func (*SignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f1ba06460f9f71, []int{0}
}
func (m *SignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureRequest.Merge(m, src)
}
func (m *SignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureRequest proto.InternalMessageInfo

func (m *SignatureRequest) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *SignatureRequest) GetProviderId() int64 {
	if m != nil {
		return m.ProviderId
	}
	return 0
}

type SignatureResponse struct {
	SignedUsage *SignedUsage `protobuf:"bytes,1,opt,name=signedUsage,proto3" json:"signedUsage,omitempty"`
}

func (m *SignatureResponse) Reset()         { *m = SignatureResponse{} }
func (m *SignatureResponse) String() string { return proto.CompactTextString(m) }
func (*SignatureResponse) ProtoMessage()    {}
func (*SignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f1ba06460f9f71, []int{1}
}
func (m *SignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureResponse.Merge(m, src)
}
func (m *SignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureResponse proto.InternalMessageInfo

func (m *SignatureResponse) GetSignedUsage() *SignedUsage {
	if m != nil {
		return m.SignedUsage
	}
	return nil
}

type UsageReport struct {
	AppId         int64  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProviderId    int64  `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	PeerId        string `protobuf:"bytes,3,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Cpu           int64  `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Gpu           int64  `protobuf:"varint,5,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Memory        int64  `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage       int64  `protobuf:"varint,7,opt,name=storage,proto3" json:"storage,omitempty"`
	UploadBytes   int64  `protobuf:"varint,8,opt,name=upload_bytes,json=uploadBytes,proto3" json:"upload_bytes,omitempty"`
	DownloadBytes int64  `protobuf:"varint,9,opt,name=download_bytes,json=downloadBytes,proto3" json:"download_bytes,omitempty"`
	Timestamp     int64  `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *UsageReport) Reset()         { *m = UsageReport{} }
func (m *UsageReport) String() string { return proto.CompactTextString(m) }
func (*UsageReport) ProtoMessage()    {}
func (*UsageReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f1ba06460f9f71, []int{2}
}
func (m *UsageReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsageReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsageReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsageReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageReport.Merge(m, src)
}
func (m *UsageReport) XXX_Size() int {
	return m.Size()
}
func (m *UsageReport) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageReport.DiscardUnknown(m)
}

var xxx_messageInfo_UsageReport proto.InternalMessageInfo

func (m *UsageReport) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *UsageReport) GetProviderId() int64 {
	if m != nil {
		return m.ProviderId
	}
	return 0
}

func (m *UsageReport) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *UsageReport) GetCpu() int64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *UsageReport) GetGpu() int64 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

func (m *UsageReport) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *UsageReport) GetStorage() int64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *UsageReport) GetUploadBytes() int64 {
	if m != nil {
		return m.UploadBytes
	}
	return 0
}

func (m *UsageReport) GetDownloadBytes() int64 {
	if m != nil {
		return m.DownloadBytes
	}
	return 0
}

func (m *UsageReport) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SignedUsage struct {
	AppId         int64  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProviderId    int64  `protobuf:"varint,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	PeerId        string `protobuf:"bytes,3,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Cpu           int64  `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Gpu           int64  `protobuf:"varint,5,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Memory        int64  `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage       int64  `protobuf:"varint,7,opt,name=storage,proto3" json:"storage,omitempty"`
	UploadBytes   int64  `protobuf:"varint,8,opt,name=upload_bytes,json=uploadBytes,proto3" json:"upload_bytes,omitempty"`
	DownloadBytes int64  `protobuf:"varint,9,opt,name=download_bytes,json=downloadBytes,proto3" json:"download_bytes,omitempty"`
	Duration      int64  `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	Timestamp     int64  `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature     []byte `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
	Hash          []byte `protobuf:"bytes,13,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SignedUsage) Reset()         { *m = SignedUsage{} }
func (m *SignedUsage) String() string { return proto.CompactTextString(m) }
func (*SignedUsage) ProtoMessage()    {}
func (*SignedUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f1ba06460f9f71, []int{3}
}
func (m *SignedUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedUsage.Merge(m, src)
}
func (m *SignedUsage) XXX_Size() int {
	return m.Size()
}
func (m *SignedUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedUsage.DiscardUnknown(m)
}

var xxx_messageInfo_SignedUsage proto.InternalMessageInfo

func (m *SignedUsage) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *SignedUsage) GetProviderId() int64 {
	if m != nil {
		return m.ProviderId
	}
	return 0
}

func (m *SignedUsage) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *SignedUsage) GetCpu() int64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *SignedUsage) GetGpu() int64 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

func (m *SignedUsage) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *SignedUsage) GetStorage() int64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *SignedUsage) GetUploadBytes() int64 {
	if m != nil {
		return m.UploadBytes
	}
	return 0
}

func (m *SignedUsage) GetDownloadBytes() int64 {
	if m != nil {
		return m.DownloadBytes
	}
	return 0
}

func (m *SignedUsage) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SignedUsage) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SignedUsage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedUsage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type Msg struct {
	// Types that are valid to be assigned to Data:
	//
	//	*Msg_SignatureRequest
	//	*Msg_SignatureResponse
	//	*Msg_UsageReport
	Data isMsg_Data `protobuf_oneof:"data"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f1ba06460f9f71, []int{4}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

type isMsg_Data interface {
	isMsg_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Msg_SignatureRequest struct {
	SignatureRequest *SignatureRequest `protobuf:"bytes,1,opt,name=SignatureRequest,proto3,oneof" json:"SignatureRequest,omitempty"`
}
type Msg_SignatureResponse struct {
	SignatureResponse *SignatureResponse `protobuf:"bytes,2,opt,name=SignatureResponse,proto3,oneof" json:"SignatureResponse,omitempty"`
}
type Msg_UsageReport struct {
	UsageReport *UsageReport `protobuf:"bytes,3,opt,name=UsageReport,proto3,oneof" json:"UsageReport,omitempty"`
}

func (*Msg_SignatureRequest) isMsg_Data()  {}
func (*Msg_SignatureResponse) isMsg_Data() {}
func (*Msg_UsageReport) isMsg_Data()       {}

func (m *Msg) GetData() isMsg_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Msg) GetSignatureRequest() *SignatureRequest {
	if x, ok := m.GetData().(*Msg_SignatureRequest); ok {
		return x.SignatureRequest
	}
	return nil
}

func (m *Msg) GetSignatureResponse() *SignatureResponse {
	if x, ok := m.GetData().(*Msg_SignatureResponse); ok {
		return x.SignatureResponse
	}
	return nil
}

func (m *Msg) GetUsageReport() *UsageReport {
	if x, ok := m.GetData().(*Msg_UsageReport); ok {
		return x.UsageReport
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Msg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Msg_SignatureRequest)(nil),
		(*Msg_SignatureResponse)(nil),
		(*Msg_UsageReport)(nil),
	}
}

type UsageInfo struct {
	PreviousUsageReport *UsageReport `protobuf:"bytes,1,opt,name=previous_usage_report,json=previousUsageReport,proto3" json:"previous_usage_report,omitempty"`
	SignedUsage         *SignedUsage `protobuf:"bytes,2,opt,name=signedUsage,proto3" json:"signedUsage,omitempty"`
}

func (m *UsageInfo) Reset()         { *m = UsageInfo{} }
func (m *UsageInfo) String() string { return proto.CompactTextString(m) }
func (*UsageInfo) ProtoMessage()    {}
func (*UsageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f1ba06460f9f71, []int{5}
}
func (m *UsageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsageInfo.Merge(m, src)
}
func (m *UsageInfo) XXX_Size() int {
	return m.Size()
}
func (m *UsageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UsageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UsageInfo proto.InternalMessageInfo

func (m *UsageInfo) GetPreviousUsageReport() *UsageReport {
	if m != nil {
		return m.PreviousUsageReport
	}
	return nil
}

func (m *UsageInfo) GetSignedUsage() *SignedUsage {
	if m != nil {
		return m.SignedUsage
	}
	return nil
}

func init() {
	proto.RegisterType((*SignatureRequest)(nil), "subnet.app.verifier.SignatureRequest")
	proto.RegisterType((*SignatureResponse)(nil), "subnet.app.verifier.SignatureResponse")
	proto.RegisterType((*UsageReport)(nil), "subnet.app.verifier.UsageReport")
	proto.RegisterType((*SignedUsage)(nil), "subnet.app.verifier.SignedUsage")
	proto.RegisterType((*Msg)(nil), "subnet.app.verifier.Msg")
	proto.RegisterType((*UsageInfo)(nil), "subnet.app.verifier.UsageInfo")
}

func init() {
	proto.RegisterFile("proto/subnet/app/verifier/types.proto", fileDescriptor_99f1ba06460f9f71)
}

var fileDescriptor_99f1ba06460f9f71 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0x93, 0xd4, 0x69, 0xc6, 0x29, 0x2a, 0x5b, 0x15, 0x2c, 0x84, 0x4c, 0xb0, 0x14, 0x94,
	0x93, 0x23, 0x95, 0x37, 0x88, 0x38, 0x24, 0x48, 0x5c, 0x1c, 0x7e, 0x8e, 0xd1, 0x86, 0xdd, 0xba,
	0x96, 0x88, 0x77, 0xd8, 0x9f, 0xa0, 0xdc, 0x78, 0x04, 0x1e, 0x80, 0x2b, 0xef, 0xc2, 0xb1, 0x47,
	0x8e, 0x28, 0xb9, 0xf1, 0x14, 0xc8, 0xeb, 0x98, 0xb8, 0x6d, 0x2a, 0x50, 0xaf, 0xdc, 0x3c, 0xdf,
	0xf7, 0xcd, 0xec, 0x7a, 0x76, 0xbe, 0x81, 0x3e, 0x4a, 0xa1, 0xc5, 0x50, 0x99, 0x79, 0xce, 0xf5,
	0x90, 0x22, 0x0e, 0x97, 0x5c, 0x66, 0xe7, 0x19, 0x97, 0x43, 0xbd, 0x42, 0xae, 0x62, 0xcb, 0x93,
	0x93, 0x52, 0x10, 0x53, 0xc4, 0xb8, 0x12, 0x44, 0x2f, 0xe1, 0x78, 0x9a, 0xa5, 0x39, 0xd5, 0x46,
	0xf2, 0x84, 0x7f, 0x34, 0x5c, 0x69, 0x72, 0x0a, 0x1e, 0x45, 0x9c, 0x65, 0x2c, 0x70, 0x7b, 0xee,
	0xa0, 0x99, 0x1c, 0x50, 0xc4, 0x09, 0x23, 0x4f, 0xc0, 0x47, 0x29, 0x96, 0x19, 0xe3, 0xb2, 0xe0,
	0x1a, 0x96, 0x83, 0x0a, 0x9a, 0xb0, 0xe8, 0x1d, 0xdc, 0xaf, 0xd5, 0x52, 0x28, 0x72, 0xc5, 0xc9,
	0x08, 0x7c, 0x95, 0xa5, 0x39, 0x67, 0x6f, 0x14, 0x4d, 0xb9, 0xad, 0xe8, 0x9f, 0xf5, 0xe2, 0x3d,
	0x77, 0x89, 0xa7, 0x3b, 0x5d, 0x52, 0x4f, 0x8a, 0xbe, 0x36, 0xc0, 0x2f, 0x61, 0x8e, 0x42, 0xde,
	0xf9, 0x82, 0xe4, 0x21, 0xb4, 0x91, 0x97, 0x64, 0xb3, 0xe7, 0x0e, 0x3a, 0x89, 0x57, 0x84, 0x13,
	0x46, 0x8e, 0xa1, 0xf9, 0x1e, 0x4d, 0xd0, 0xb2, 0x19, 0xc5, 0x67, 0x81, 0xa4, 0x68, 0x82, 0x83,
	0x12, 0x49, 0xd1, 0x90, 0x07, 0xe0, 0x2d, 0xf8, 0x42, 0xc8, 0x55, 0xe0, 0x59, 0x70, 0x1b, 0x91,
	0x00, 0xda, 0x4a, 0x0b, 0x59, 0xfc, 0x5c, 0xdb, 0x12, 0x55, 0x48, 0x9e, 0x42, 0xd7, 0xe0, 0x07,
	0x41, 0xd9, 0x6c, 0xbe, 0xd2, 0x5c, 0x05, 0x87, 0x96, 0xf6, 0x4b, 0x6c, 0x54, 0x40, 0xa4, 0x0f,
	0xf7, 0x98, 0xf8, 0x94, 0xd7, 0x44, 0x1d, 0x2b, 0x3a, 0xaa, 0xd0, 0x52, 0xf6, 0x18, 0x3a, 0x3a,
	0x5b, 0x70, 0xa5, 0xe9, 0x02, 0x03, 0xb0, 0x8a, 0x1d, 0x10, 0xfd, 0x6a, 0x80, 0x5f, 0xeb, 0xdd,
	0xff, 0xd7, 0x9e, 0x47, 0x70, 0xc8, 0x8c, 0xa4, 0x3a, 0x13, 0xf9, 0xb6, 0x3b, 0x7f, 0xe2, 0xab,
	0xad, 0xf3, 0xaf, 0xb5, 0xae, 0x60, 0x55, 0x35, 0xb2, 0x41, 0xb7, 0xe7, 0x0e, 0xba, 0xc9, 0x0e,
	0x20, 0x04, 0x5a, 0x17, 0x54, 0x5d, 0x04, 0x47, 0x96, 0xb0, 0xdf, 0xd1, 0xe7, 0x06, 0x34, 0x5f,
	0xa9, 0x94, 0x4c, 0x6f, 0x1a, 0x67, 0x3b, 0xdc, 0xfd, 0x5b, 0x87, 0xbb, 0x2e, 0x1e, 0x3b, 0xc9,
	0x4d, 0xe7, 0xbd, 0xdd, 0xe3, 0x20, 0xfb, 0x50, 0xfe, 0xd9, 0xb3, 0xbf, 0x55, 0x2d, 0xd5, 0x63,
	0x27, 0xd9, 0x63, 0xc2, 0x17, 0x57, 0xfc, 0x63, 0x5f, 0xf7, 0x36, 0x13, 0xd6, 0x74, 0x63, 0x27,
	0xa9, 0xa7, 0x8d, 0x3c, 0x68, 0x31, 0xaa, 0x69, 0xf4, 0xcd, 0x85, 0x8e, 0xc5, 0x27, 0xf9, 0xb9,
	0x20, 0xaf, 0xe1, 0x14, 0x25, 0x5f, 0x66, 0xc2, 0xa8, 0x99, 0x29, 0xd0, 0x99, 0x2c, 0x4f, 0x71,
	0xff, 0xed, 0x94, 0xe4, 0xa4, 0x4a, 0xaf, 0x5b, 0xfc, 0xda, 0xda, 0x68, 0xdc, 0x61, 0x6d, 0x8c,
	0x82, 0xef, 0xeb, 0xd0, 0xbd, 0x5c, 0x87, 0xee, 0xcf, 0x75, 0xe8, 0x7e, 0xd9, 0x84, 0xce, 0xe5,
	0x26, 0x74, 0x7e, 0x6c, 0x42, 0x67, 0xee, 0xd9, 0x8d, 0xf8, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xcd, 0xe1, 0xc0, 0x9f, 0x3a, 0x05, 0x00, 0x00,
}

func (m *SignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProviderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignedUsage != nil {
		{
			size, err := m.SignedUsage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UsageReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsageReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.DownloadBytes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DownloadBytes))
		i--
		dAtA[i] = 0x48
	}
	if m.UploadBytes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UploadBytes))
		i--
		dAtA[i] = 0x40
	}
	if m.Storage != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Storage))
		i--
		dAtA[i] = 0x38
	}
	if m.Memory != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x30
	}
	if m.Gpu != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Gpu))
		i--
		dAtA[i] = 0x28
	}
	if m.Cpu != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Cpu))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProviderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x62
	}
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x58
	}
	if m.Duration != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x50
	}
	if m.DownloadBytes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DownloadBytes))
		i--
		dAtA[i] = 0x48
	}
	if m.UploadBytes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UploadBytes))
		i--
		dAtA[i] = 0x40
	}
	if m.Storage != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Storage))
		i--
		dAtA[i] = 0x38
	}
	if m.Memory != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x30
	}
	if m.Gpu != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Gpu))
		i--
		dAtA[i] = 0x28
	}
	if m.Cpu != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Cpu))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProviderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProviderId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Msg_SignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_SignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignatureRequest != nil {
		{
			size, err := m.SignatureRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Msg_SignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_SignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignatureResponse != nil {
		{
			size, err := m.SignatureResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Msg_UsageReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_UsageReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UsageReport != nil {
		{
			size, err := m.UsageReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UsageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignedUsage != nil {
		{
			size, err := m.SignedUsage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PreviousUsageReport != nil {
		{
			size, err := m.PreviousUsageReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovTypes(uint64(m.AppId))
	}
	if m.ProviderId != 0 {
		n += 1 + sovTypes(uint64(m.ProviderId))
	}
	return n
}

func (m *SignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignedUsage != nil {
		l = m.SignedUsage.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UsageReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovTypes(uint64(m.AppId))
	}
	if m.ProviderId != 0 {
		n += 1 + sovTypes(uint64(m.ProviderId))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Cpu != 0 {
		n += 1 + sovTypes(uint64(m.Cpu))
	}
	if m.Gpu != 0 {
		n += 1 + sovTypes(uint64(m.Gpu))
	}
	if m.Memory != 0 {
		n += 1 + sovTypes(uint64(m.Memory))
	}
	if m.Storage != 0 {
		n += 1 + sovTypes(uint64(m.Storage))
	}
	if m.UploadBytes != 0 {
		n += 1 + sovTypes(uint64(m.UploadBytes))
	}
	if m.DownloadBytes != 0 {
		n += 1 + sovTypes(uint64(m.DownloadBytes))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	return n
}

func (m *SignedUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovTypes(uint64(m.AppId))
	}
	if m.ProviderId != 0 {
		n += 1 + sovTypes(uint64(m.ProviderId))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Cpu != 0 {
		n += 1 + sovTypes(uint64(m.Cpu))
	}
	if m.Gpu != 0 {
		n += 1 + sovTypes(uint64(m.Gpu))
	}
	if m.Memory != 0 {
		n += 1 + sovTypes(uint64(m.Memory))
	}
	if m.Storage != 0 {
		n += 1 + sovTypes(uint64(m.Storage))
	}
	if m.UploadBytes != 0 {
		n += 1 + sovTypes(uint64(m.UploadBytes))
	}
	if m.DownloadBytes != 0 {
		n += 1 + sovTypes(uint64(m.DownloadBytes))
	}
	if m.Duration != 0 {
		n += 1 + sovTypes(uint64(m.Duration))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *Msg_SignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureRequest != nil {
		l = m.SignatureRequest.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Msg_SignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureResponse != nil {
		l = m.SignatureResponse.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Msg_UsageReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsageReport != nil {
		l = m.UsageReport.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UsageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreviousUsageReport != nil {
		l = m.PreviousUsageReport.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SignedUsage != nil {
		l = m.SignedUsage.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			m.ProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignedUsage == nil {
				m.SignedUsage = &SignedUsage{}
			}
			if err := m.SignedUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsageReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			m.ProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpu |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			m.Gpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gpu |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			m.Storage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Storage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadBytes", wireType)
			}
			m.UploadBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadBytes", wireType)
			}
			m.DownloadBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownloadBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			m.ProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpu |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			m.Gpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gpu |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			m.Storage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Storage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadBytes", wireType)
			}
			m.UploadBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadBytes", wireType)
			}
			m.DownloadBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownloadBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignatureRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Msg_SignatureRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignatureResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Msg_SignatureResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UsageReport{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Msg_UsageReport{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousUsageReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousUsageReport == nil {
				m.PreviousUsageReport = &UsageReport{}
			}
			if err := m.PreviousUsageReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignedUsage == nil {
				m.SignedUsage = &SignedUsage{}
			}
			if err := m.SignedUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
