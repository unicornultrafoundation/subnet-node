// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/subnet/cert/cert_v1.proto

package cert

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Curve int32

const (
	Curve_CURVE25519 Curve = 0
	Curve_P256       Curve = 1
)

var Curve_name = map[int32]string{
	0: "CURVE25519",
	1: "P256",
}

var Curve_value = map[string]int32{
	"CURVE25519": 0,
	"P256":       1,
}

func (x Curve) String() string {
	return proto.EnumName(Curve_name, int32(x))
}

func (Curve) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4eacf07e69f0ce9, []int{0}
}

type RawNebulaCertificate struct {
	Details   *RawNebulaCertificateDetails `protobuf:"bytes,1,opt,name=Details,proto3" json:"Details,omitempty"`
	Signature []byte                       `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *RawNebulaCertificate) Reset()         { *m = RawNebulaCertificate{} }
func (m *RawNebulaCertificate) String() string { return proto.CompactTextString(m) }
func (*RawNebulaCertificate) ProtoMessage()    {}
func (*RawNebulaCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4eacf07e69f0ce9, []int{0}
}
func (m *RawNebulaCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawNebulaCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawNebulaCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawNebulaCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawNebulaCertificate.Merge(m, src)
}
func (m *RawNebulaCertificate) XXX_Size() int {
	return m.Size()
}
func (m *RawNebulaCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_RawNebulaCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_RawNebulaCertificate proto.InternalMessageInfo

func (m *RawNebulaCertificate) GetDetails() *RawNebulaCertificateDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RawNebulaCertificate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type RawNebulaCertificateDetails struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Ips and Subnets are in big endian 32 bit pairs, 1st the ip, 2nd the mask
	Ips       []uint32 `protobuf:"varint,2,rep,packed,name=Ips,proto3" json:"Ips,omitempty"`
	Subnets   []uint32 `protobuf:"varint,3,rep,packed,name=Subnets,proto3" json:"Subnets,omitempty"`
	Groups    []string `protobuf:"bytes,4,rep,name=Groups,proto3" json:"Groups,omitempty"`
	NotBefore int64    `protobuf:"varint,5,opt,name=NotBefore,proto3" json:"NotBefore,omitempty"`
	NotAfter  int64    `protobuf:"varint,6,opt,name=NotAfter,proto3" json:"NotAfter,omitempty"`
	PublicKey []byte   `protobuf:"bytes,7,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	IsCA      bool     `protobuf:"varint,8,opt,name=IsCA,proto3" json:"IsCA,omitempty"`
	// sha-256 of the issuer certificate, if this field is blank the cert is self-signed
	Issuer []byte `protobuf:"bytes,9,opt,name=Issuer,proto3" json:"Issuer,omitempty"`
	Curve  Curve  `protobuf:"varint,100,opt,name=curve,proto3,enum=subnet.cert.Curve" json:"curve,omitempty"`
}

func (m *RawNebulaCertificateDetails) Reset()         { *m = RawNebulaCertificateDetails{} }
func (m *RawNebulaCertificateDetails) String() string { return proto.CompactTextString(m) }
func (*RawNebulaCertificateDetails) ProtoMessage()    {}
func (*RawNebulaCertificateDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4eacf07e69f0ce9, []int{1}
}
func (m *RawNebulaCertificateDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawNebulaCertificateDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawNebulaCertificateDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawNebulaCertificateDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawNebulaCertificateDetails.Merge(m, src)
}
func (m *RawNebulaCertificateDetails) XXX_Size() int {
	return m.Size()
}
func (m *RawNebulaCertificateDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_RawNebulaCertificateDetails.DiscardUnknown(m)
}

var xxx_messageInfo_RawNebulaCertificateDetails proto.InternalMessageInfo

func (m *RawNebulaCertificateDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RawNebulaCertificateDetails) GetIps() []uint32 {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *RawNebulaCertificateDetails) GetSubnets() []uint32 {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *RawNebulaCertificateDetails) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *RawNebulaCertificateDetails) GetNotBefore() int64 {
	if m != nil {
		return m.NotBefore
	}
	return 0
}

func (m *RawNebulaCertificateDetails) GetNotAfter() int64 {
	if m != nil {
		return m.NotAfter
	}
	return 0
}

func (m *RawNebulaCertificateDetails) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *RawNebulaCertificateDetails) GetIsCA() bool {
	if m != nil {
		return m.IsCA
	}
	return false
}

func (m *RawNebulaCertificateDetails) GetIssuer() []byte {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *RawNebulaCertificateDetails) GetCurve() Curve {
	if m != nil {
		return m.Curve
	}
	return Curve_CURVE25519
}

type RawNebulaEncryptedData struct {
	EncryptionMetadata *RawNebulaEncryptionMetadata `protobuf:"bytes,1,opt,name=EncryptionMetadata,proto3" json:"EncryptionMetadata,omitempty"`
	Ciphertext         []byte                       `protobuf:"bytes,2,opt,name=Ciphertext,proto3" json:"Ciphertext,omitempty"`
}

func (m *RawNebulaEncryptedData) Reset()         { *m = RawNebulaEncryptedData{} }
func (m *RawNebulaEncryptedData) String() string { return proto.CompactTextString(m) }
func (*RawNebulaEncryptedData) ProtoMessage()    {}
func (*RawNebulaEncryptedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4eacf07e69f0ce9, []int{2}
}
func (m *RawNebulaEncryptedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawNebulaEncryptedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawNebulaEncryptedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawNebulaEncryptedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawNebulaEncryptedData.Merge(m, src)
}
func (m *RawNebulaEncryptedData) XXX_Size() int {
	return m.Size()
}
func (m *RawNebulaEncryptedData) XXX_DiscardUnknown() {
	xxx_messageInfo_RawNebulaEncryptedData.DiscardUnknown(m)
}

var xxx_messageInfo_RawNebulaEncryptedData proto.InternalMessageInfo

func (m *RawNebulaEncryptedData) GetEncryptionMetadata() *RawNebulaEncryptionMetadata {
	if m != nil {
		return m.EncryptionMetadata
	}
	return nil
}

func (m *RawNebulaEncryptedData) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

type RawNebulaEncryptionMetadata struct {
	EncryptionAlgorithm string                     `protobuf:"bytes,1,opt,name=EncryptionAlgorithm,proto3" json:"EncryptionAlgorithm,omitempty"`
	Argon2Parameters    *RawNebulaArgon2Parameters `protobuf:"bytes,2,opt,name=Argon2Parameters,proto3" json:"Argon2Parameters,omitempty"`
}

func (m *RawNebulaEncryptionMetadata) Reset()         { *m = RawNebulaEncryptionMetadata{} }
func (m *RawNebulaEncryptionMetadata) String() string { return proto.CompactTextString(m) }
func (*RawNebulaEncryptionMetadata) ProtoMessage()    {}
func (*RawNebulaEncryptionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4eacf07e69f0ce9, []int{3}
}
func (m *RawNebulaEncryptionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawNebulaEncryptionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawNebulaEncryptionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawNebulaEncryptionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawNebulaEncryptionMetadata.Merge(m, src)
}
func (m *RawNebulaEncryptionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RawNebulaEncryptionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RawNebulaEncryptionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RawNebulaEncryptionMetadata proto.InternalMessageInfo

func (m *RawNebulaEncryptionMetadata) GetEncryptionAlgorithm() string {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return ""
}

func (m *RawNebulaEncryptionMetadata) GetArgon2Parameters() *RawNebulaArgon2Parameters {
	if m != nil {
		return m.Argon2Parameters
	}
	return nil
}

type RawNebulaArgon2Parameters struct {
	Version     int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Memory      uint32 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Parallelism uint32 `protobuf:"varint,4,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	Iterations  uint32 `protobuf:"varint,3,opt,name=iterations,proto3" json:"iterations,omitempty"`
	Salt        []byte `protobuf:"bytes,5,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *RawNebulaArgon2Parameters) Reset()         { *m = RawNebulaArgon2Parameters{} }
func (m *RawNebulaArgon2Parameters) String() string { return proto.CompactTextString(m) }
func (*RawNebulaArgon2Parameters) ProtoMessage()    {}
func (*RawNebulaArgon2Parameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4eacf07e69f0ce9, []int{4}
}
func (m *RawNebulaArgon2Parameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawNebulaArgon2Parameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawNebulaArgon2Parameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawNebulaArgon2Parameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawNebulaArgon2Parameters.Merge(m, src)
}
func (m *RawNebulaArgon2Parameters) XXX_Size() int {
	return m.Size()
}
func (m *RawNebulaArgon2Parameters) XXX_DiscardUnknown() {
	xxx_messageInfo_RawNebulaArgon2Parameters.DiscardUnknown(m)
}

var xxx_messageInfo_RawNebulaArgon2Parameters proto.InternalMessageInfo

func (m *RawNebulaArgon2Parameters) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RawNebulaArgon2Parameters) GetMemory() uint32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *RawNebulaArgon2Parameters) GetParallelism() uint32 {
	if m != nil {
		return m.Parallelism
	}
	return 0
}

func (m *RawNebulaArgon2Parameters) GetIterations() uint32 {
	if m != nil {
		return m.Iterations
	}
	return 0
}

func (m *RawNebulaArgon2Parameters) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func init() {
	proto.RegisterEnum("subnet.cert.Curve", Curve_name, Curve_value)
	proto.RegisterType((*RawNebulaCertificate)(nil), "subnet.cert.RawNebulaCertificate")
	proto.RegisterType((*RawNebulaCertificateDetails)(nil), "subnet.cert.RawNebulaCertificateDetails")
	proto.RegisterType((*RawNebulaEncryptedData)(nil), "subnet.cert.RawNebulaEncryptedData")
	proto.RegisterType((*RawNebulaEncryptionMetadata)(nil), "subnet.cert.RawNebulaEncryptionMetadata")
	proto.RegisterType((*RawNebulaArgon2Parameters)(nil), "subnet.cert.RawNebulaArgon2Parameters")
}

func init() { proto.RegisterFile("proto/subnet/cert/cert_v1.proto", fileDescriptor_a4eacf07e69f0ce9) }

var fileDescriptor_a4eacf07e69f0ce9 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0x8e, 0x9b, 0x7f, 0xa7, 0xad, 0x22, 0x83, 0x2a, 0xf3, 0xa3, 0x65, 0xc9, 0x01, 0xad, 0x38,
	0xa4, 0x74, 0x51, 0x90, 0x38, 0x26, 0x69, 0x85, 0x22, 0x44, 0x14, 0xb9, 0x02, 0x21, 0x2e, 0xc8,
	0x49, 0x26, 0xe9, 0x4a, 0xbb, 0xeb, 0x95, 0xed, 0x0d, 0xcd, 0x5b, 0x20, 0x5e, 0xa1, 0x2f, 0xc3,
	0xb1, 0x47, 0x8e, 0x28, 0x79, 0x11, 0x64, 0x67, 0xf3, 0x03, 0x0d, 0xbd, 0xac, 0x66, 0xbe, 0xf9,
	0xc6, 0xfe, 0x3c, 0xdf, 0x2c, 0x7e, 0x96, 0x48, 0xa1, 0xc5, 0xa9, 0x4a, 0x87, 0x31, 0xe8, 0xd3,
	0x11, 0xc8, 0xd5, 0xe7, 0xeb, 0xec, 0xac, 0x69, 0x2b, 0xa4, 0xb6, 0x2a, 0x35, 0x0d, 0xda, 0xb8,
	0xc6, 0x0f, 0x19, 0xff, 0xd6, 0x87, 0x61, 0x1a, 0xf2, 0x2e, 0x48, 0x1d, 0x4c, 0x82, 0x11, 0xd7,
	0x40, 0x3a, 0xb8, 0x7c, 0x0e, 0x9a, 0x07, 0xa1, 0xa2, 0xc8, 0x45, 0x5e, 0xcd, 0xf7, 0x9a, 0x3b,
	0x6d, 0xcd, 0x7d, 0x3d, 0x19, 0x9f, 0xad, 0x1b, 0xc9, 0x53, 0x5c, 0xbd, 0x0c, 0xa6, 0x31, 0xd7,
	0xa9, 0x04, 0x7a, 0xe0, 0x22, 0xef, 0x90, 0x6d, 0x81, 0xc6, 0xcd, 0x01, 0x7e, 0x72, 0xcf, 0x31,
	0x84, 0xe0, 0x42, 0x9f, 0x47, 0x60, 0xaf, 0xaf, 0x32, 0x1b, 0x93, 0x3a, 0xce, 0xf7, 0x12, 0x45,
	0x0f, 0xdc, 0xbc, 0x77, 0xc4, 0x4c, 0x48, 0x28, 0x2e, 0x5f, 0x5a, 0x5d, 0x8a, 0xe6, 0x2d, 0xba,
	0x4e, 0xc9, 0x09, 0x2e, 0xbd, 0x93, 0x22, 0x4d, 0x14, 0x2d, 0xb8, 0x79, 0xaf, 0xca, 0xb2, 0xcc,
	0xa8, 0xea, 0x0b, 0xdd, 0x81, 0x89, 0x90, 0x40, 0x8b, 0x2e, 0xf2, 0xf2, 0x6c, 0x0b, 0x90, 0xc7,
	0xb8, 0xd2, 0x17, 0xba, 0x3d, 0xd1, 0x20, 0x69, 0xc9, 0x16, 0x37, 0xb9, 0xe9, 0x1c, 0xa4, 0xc3,
	0x30, 0x18, 0xbd, 0x87, 0x39, 0x2d, 0xaf, 0xde, 0xb3, 0x01, 0x8c, 0xde, 0x9e, 0xea, 0xb6, 0x69,
	0xc5, 0x45, 0x5e, 0x85, 0xd9, 0xd8, 0x68, 0xe8, 0x29, 0x95, 0x82, 0xa4, 0x55, 0x4b, 0xcf, 0x32,
	0xe2, 0xe1, 0xe2, 0x28, 0x95, 0x33, 0xa0, 0x63, 0x17, 0x79, 0xc7, 0x3e, 0xf9, 0x6b, 0xb6, 0x5d,
	0x53, 0x61, 0x2b, 0x42, 0xe3, 0x07, 0xc2, 0x27, 0x9b, 0x29, 0x5d, 0xc4, 0x23, 0x39, 0x4f, 0x34,
	0x8c, 0xcf, 0xb9, 0xe6, 0xe4, 0x33, 0x26, 0x19, 0x10, 0x88, 0xf8, 0x03, 0x68, 0x3e, 0xe6, 0x9a,
	0xdf, 0xef, 0xd6, 0x5d, 0x3e, 0xdb, 0x73, 0x06, 0x71, 0x30, 0xee, 0x06, 0xc9, 0x15, 0x48, 0x0d,
	0xd7, 0x3a, 0x73, 0x6e, 0x07, 0x69, 0xdc, 0xa0, 0x1d, 0xeb, 0xf6, 0xf4, 0xbf, 0xc2, 0x0f, 0xb6,
	0x68, 0x3b, 0x9c, 0x0a, 0x19, 0xe8, 0xab, 0x28, 0x73, 0x72, 0x5f, 0x89, 0x30, 0x5c, 0x6f, 0xcb,
	0xa9, 0x88, 0xfd, 0x01, 0x97, 0x3c, 0x02, 0x0d, 0x52, 0xd9, 0x7b, 0x6b, 0xfe, 0x8b, 0xfd, 0x2f,
	0xf9, 0x97, 0xcd, 0xee, 0xf4, 0x1b, 0x95, 0x8f, 0xfe, 0xcb, 0x37, 0x8b, 0x33, 0x03, 0xa9, 0x02,
	0x11, 0x5b, 0x5d, 0x45, 0xb6, 0x4e, 0x8d, 0x69, 0x11, 0x44, 0x42, 0xce, 0xad, 0x82, 0x23, 0x96,
	0x65, 0xc4, 0xc5, 0xb5, 0x84, 0x4b, 0x1e, 0x86, 0x10, 0x06, 0x2a, 0xa2, 0x05, 0x5b, 0xdc, 0x85,
	0xcc, 0xdc, 0x02, 0x0d, 0x92, 0x9b, 0xb7, 0x99, 0x7d, 0x34, 0x84, 0x1d, 0xc4, 0xac, 0x88, 0xe2,
	0xa1, 0xb6, 0x5b, 0x77, 0xc8, 0x6c, 0xfc, 0xf2, 0x39, 0x2e, 0x5a, 0xc3, 0xc9, 0x31, 0xc6, 0xdd,
	0x8f, 0xec, 0xd3, 0x85, 0xdf, 0x6a, 0x9d, 0xbd, 0xad, 0xe7, 0x48, 0x05, 0x17, 0x06, 0x7e, 0xeb,
	0x4d, 0x1d, 0x75, 0x9c, 0x9f, 0x0b, 0x07, 0xdd, 0x2e, 0x1c, 0xf4, 0x7b, 0xe1, 0xa0, 0xef, 0x4b,
	0x27, 0x77, 0xbb, 0x74, 0x72, 0xbf, 0x96, 0x4e, 0xee, 0x4b, 0xc1, 0x0c, 0x65, 0x58, 0xb2, 0xff,
	0xf5, 0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x38, 0xb3, 0xd6, 0xfa, 0x03, 0x00, 0x00,
}

func (m *RawNebulaCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawNebulaCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawNebulaCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCertV1(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RawNebulaCertificateDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawNebulaCertificateDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawNebulaCertificateDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Curve != 0 {
		i = encodeVarintCertV1(dAtA, i, uint64(m.Curve))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintCertV1(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsCA {
		i--
		if m.IsCA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintCertV1(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NotAfter != 0 {
		i = encodeVarintCertV1(dAtA, i, uint64(m.NotAfter))
		i--
		dAtA[i] = 0x30
	}
	if m.NotBefore != 0 {
		i = encodeVarintCertV1(dAtA, i, uint64(m.NotBefore))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Groups[iNdEx])
			copy(dAtA[i:], m.Groups[iNdEx])
			i = encodeVarintCertV1(dAtA, i, uint64(len(m.Groups[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Subnets) > 0 {
		dAtA3 := make([]byte, len(m.Subnets)*10)
		var j2 int
		for _, num := range m.Subnets {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintCertV1(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ips) > 0 {
		dAtA5 := make([]byte, len(m.Ips)*10)
		var j4 int
		for _, num := range m.Ips {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintCertV1(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCertV1(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RawNebulaEncryptedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawNebulaEncryptedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawNebulaEncryptedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ciphertext) > 0 {
		i -= len(m.Ciphertext)
		copy(dAtA[i:], m.Ciphertext)
		i = encodeVarintCertV1(dAtA, i, uint64(len(m.Ciphertext)))
		i--
		dAtA[i] = 0x12
	}
	if m.EncryptionMetadata != nil {
		{
			size, err := m.EncryptionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RawNebulaEncryptionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawNebulaEncryptionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawNebulaEncryptionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Argon2Parameters != nil {
		{
			size, err := m.Argon2Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptionAlgorithm) > 0 {
		i -= len(m.EncryptionAlgorithm)
		copy(dAtA[i:], m.EncryptionAlgorithm)
		i = encodeVarintCertV1(dAtA, i, uint64(len(m.EncryptionAlgorithm)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RawNebulaArgon2Parameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawNebulaArgon2Parameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawNebulaArgon2Parameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintCertV1(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Parallelism != 0 {
		i = encodeVarintCertV1(dAtA, i, uint64(m.Parallelism))
		i--
		dAtA[i] = 0x20
	}
	if m.Iterations != 0 {
		i = encodeVarintCertV1(dAtA, i, uint64(m.Iterations))
		i--
		dAtA[i] = 0x18
	}
	if m.Memory != 0 {
		i = encodeVarintCertV1(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintCertV1(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCertV1(dAtA []byte, offset int, v uint64) int {
	offset -= sovCertV1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RawNebulaCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovCertV1(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCertV1(uint64(l))
	}
	return n
}

func (m *RawNebulaCertificateDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCertV1(uint64(l))
	}
	if len(m.Ips) > 0 {
		l = 0
		for _, e := range m.Ips {
			l += sovCertV1(uint64(e))
		}
		n += 1 + sovCertV1(uint64(l)) + l
	}
	if len(m.Subnets) > 0 {
		l = 0
		for _, e := range m.Subnets {
			l += sovCertV1(uint64(e))
		}
		n += 1 + sovCertV1(uint64(l)) + l
	}
	if len(m.Groups) > 0 {
		for _, s := range m.Groups {
			l = len(s)
			n += 1 + l + sovCertV1(uint64(l))
		}
	}
	if m.NotBefore != 0 {
		n += 1 + sovCertV1(uint64(m.NotBefore))
	}
	if m.NotAfter != 0 {
		n += 1 + sovCertV1(uint64(m.NotAfter))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovCertV1(uint64(l))
	}
	if m.IsCA {
		n += 2
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovCertV1(uint64(l))
	}
	if m.Curve != 0 {
		n += 2 + sovCertV1(uint64(m.Curve))
	}
	return n
}

func (m *RawNebulaEncryptedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncryptionMetadata != nil {
		l = m.EncryptionMetadata.Size()
		n += 1 + l + sovCertV1(uint64(l))
	}
	l = len(m.Ciphertext)
	if l > 0 {
		n += 1 + l + sovCertV1(uint64(l))
	}
	return n
}

func (m *RawNebulaEncryptionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptionAlgorithm)
	if l > 0 {
		n += 1 + l + sovCertV1(uint64(l))
	}
	if m.Argon2Parameters != nil {
		l = m.Argon2Parameters.Size()
		n += 1 + l + sovCertV1(uint64(l))
	}
	return n
}

func (m *RawNebulaArgon2Parameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovCertV1(uint64(m.Version))
	}
	if m.Memory != 0 {
		n += 1 + sovCertV1(uint64(m.Memory))
	}
	if m.Iterations != 0 {
		n += 1 + sovCertV1(uint64(m.Iterations))
	}
	if m.Parallelism != 0 {
		n += 1 + sovCertV1(uint64(m.Parallelism))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovCertV1(uint64(l))
	}
	return n
}

func sovCertV1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCertV1(x uint64) (n int) {
	return sovCertV1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RawNebulaCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawNebulaCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawNebulaCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &RawNebulaCertificateDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawNebulaCertificateDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawNebulaCertificateDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawNebulaCertificateDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCertV1
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ips = append(m.Ips, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCertV1
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCertV1
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCertV1
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ips) == 0 {
					m.Ips = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCertV1
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ips = append(m.Ips, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCertV1
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Subnets = append(m.Subnets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCertV1
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCertV1
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCertV1
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Subnets) == 0 {
					m.Subnets = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCertV1
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Subnets = append(m.Subnets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			m.NotBefore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotBefore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			m.NotAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotAfter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCA = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = append(m.Issuer[:0], dAtA[iNdEx:postIndex]...)
			if m.Issuer == nil {
				m.Issuer = []byte{}
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curve", wireType)
			}
			m.Curve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curve |= Curve(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCertV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawNebulaEncryptedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawNebulaEncryptedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawNebulaEncryptedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionMetadata == nil {
				m.EncryptionMetadata = &RawNebulaEncryptionMetadata{}
			}
			if err := m.EncryptionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ciphertext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ciphertext = append(m.Ciphertext[:0], dAtA[iNdEx:postIndex]...)
			if m.Ciphertext == nil {
				m.Ciphertext = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawNebulaEncryptionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawNebulaEncryptionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawNebulaEncryptionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Argon2Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Argon2Parameters == nil {
				m.Argon2Parameters = &RawNebulaArgon2Parameters{}
			}
			if err := m.Argon2Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawNebulaArgon2Parameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawNebulaArgon2Parameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawNebulaArgon2Parameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterations", wireType)
			}
			m.Iterations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iterations |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parallelism", wireType)
			}
			m.Parallelism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parallelism |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCertV1
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCertV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = append(m.Salt[:0], dAtA[iNdEx:postIndex]...)
			if m.Salt == nil {
				m.Salt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCertV1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCertV1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCertV1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCertV1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCertV1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCertV1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCertV1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCertV1 = fmt.Errorf("proto: unexpected end of group")
)
